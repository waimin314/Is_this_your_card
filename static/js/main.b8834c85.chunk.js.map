{"version":3,"sources":["components/Card.jsx","components/Popup.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","style","display","justifyContent","alignItems","width","height","backgroundColor","padding","borderRadius","margin","border","boxShadow","fontSize","fontFamily","fontWeight","color","number","Popup","isVisible","title","length","className","onClick","restartHandler","INSTUCTIONS","App","execute","colNumber","state","stage","tmp_nums","colToRows","updatePossibleNums","slice","CARDS_PER_COL","setInstruction","setState","instruction","console","log","showPopup","newNumbers","i","push","numbers","j","col_1","TOTAL_CARDS","col_2","col_3","selectedNums","prvPosNums","possibleNums","newPosNums","forEach","n","includes","getRandNumArray","numArray","shuffle","arr","random","Math","floor","tmp","renderGrid","map","num","key","reset","this","easing","duration","staggerDelayBy","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8834c85.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Card(props) {\n  const cardStyle = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25px\",\n    height: \"25px\",\n    backgroundColor: \"white\",\n    padding: \"10px\",\n    borderRadius: \"27px\",\n    margin: \"10px 20px\",\n    border: \"2px solid #7400b8\",\n    boxShadow:\n      \"0 2.8px 2.2px rgba(0, 0, 0, 0.02),0 6.7px 5.3px rgba(0, 0, 0, 0.028)\",\n  };\n\n  const numStyle = {\n    fontSize: \"20px\",\n    fontFamily: \"Poppins,sans-serif\",\n    fontWeight: \"400\",\n    color: \"#3D3B90\",\n  };\n\n  return (\n    <div style={cardStyle}>\n      <h1 style={numStyle}>{props.number}</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"./../styles/Popup.css\";\n\nexport default function Popup(props) {\n  if (!props.isVisible) return null;\n\n  const title = props.number.length !== 1?'Invalid number':'Is this your Number?'\n\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <div className=\"title\">{title}</div>\n        <div className=\"cardWrapper\">\n          {\n            props.number.length!==1?'Please try again':<Card number={props.number} />\n          }\n        </div>\n        <div className=\"btnContainer\">\n          <button onClick={props.restartHandler} className=\"btn btn-restart\">\n            Restart\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport Popup from './components/Popup';\nimport FlipMove from 'react-flip-move';\n\nconst TOTAL_CARDS = 24;\nconst TOTAL_COL = 3;\nconst CARDS_PER_COL = TOTAL_CARDS / TOTAL_COL;\nconst INSTUCTIONS = [\n  'Pick a number and select its column',\n  'Select its column again',\n  'Is this your Number?',\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: this.getRandNumArray(),\n      possibleNums: [],\n      stage: 0,\n      instruction: INSTUCTIONS[0],\n    };\n  }\n\n  execute = (colNumber) => {\n    if (this.state.stage >= 3) return;\n    let tmp_nums = this.colToRows(colNumber);\n    this.updatePossibleNums(\n      tmp_nums.slice(CARDS_PER_COL * 1, CARDS_PER_COL * 2)\n    );\n    this.setInstruction();\n    this.setState({ stage: this.state.stage + 1 });\n  };\n\n  setInstruction = () => {\n    switch (this.state.stage + 1) {\n      case 0:\n        this.setState({ instruction: INSTUCTIONS[0] });\n        break;\n      case 1:\n      case 2:\n        this.setState({ instruction: INSTUCTIONS[1] });\n        break;\n      case 3:\n        this.setState({ instruction: INSTUCTIONS[2] });\n        break;\n      default:\n        console.log('Invalid stage ' + this.state.stage + 1);\n    }\n  };\n\n  showPopup = () => {\n    if (this.state.stage === 3) {\n    }\n  };\n\n  colToRows = (colNumber) => {\n    let newNumbers = [];\n    for (let i = 0; i < TOTAL_COL; i++) {\n      newNumbers.push(this.state.numbers[i]);\n      for (let j = i + 3; j < TOTAL_CARDS; j += 3) {\n        newNumbers.push(this.state.numbers[j]);\n      }\n    }\n\n    let col_1 = newNumbers.slice(CARDS_PER_COL * 0, CARDS_PER_COL); // 1 to 9\n    let col_2 = newNumbers.slice(CARDS_PER_COL * 1, CARDS_PER_COL * 2); // 10 to 18\n    let col_3 = newNumbers.slice(CARDS_PER_COL * 2, CARDS_PER_COL * 3); // 19 to 27\n\n    switch (colNumber) {\n      case 1:\n        newNumbers = [...col_2, ...col_1, ...col_3];\n        break;\n\n      case 2:\n        newNumbers = [...col_1, ...col_2, ...col_3];\n        break;\n\n      case 3:\n        newNumbers = [...col_2, ...col_3, ...col_1];\n        break;\n\n      default:\n        break;\n    }\n    this.setState({\n      numbers: newNumbers,\n    });\n\n    return newNumbers;\n  };\n\n  updatePossibleNums = (selectedNums) => {\n    let prvPosNums = this.state.possibleNums;\n    let newPosNums = [];\n    if (prvPosNums.length === 0) {\n      newPosNums = selectedNums;\n    } else {\n      prvPosNums.forEach((n) => {\n        if (selectedNums.includes(n)) newPosNums.push(n);\n      });\n    }\n    this.setState({\n      possibleNums: newPosNums,\n    });\n  };\n\n  getRandNumArray = () => {\n    let numArray = [];\n\n    // Populate with TOTAL_CARDS numbers\n    for (let i = 1; i <= TOTAL_CARDS; i++) numArray.push(i);\n\n    return this.shuffle(numArray);\n  };\n\n  shuffle = (arr) => {\n    //Shuffle;\n    for (let j = arr.length - 1; j >= 0; j--) {\n      let random = Math.floor(Math.random() * j);\n      let tmp = arr[random];\n      arr[random] = arr[j];\n      arr[j] = tmp;\n    }\n\n    return arr;\n  };\n\n  renderGrid = () => {\n    return this.state.numbers.map((num, i) => {\n      return (\n        <div key={num}>\n          <Card number={num} />\n        </div>\n      );\n    });\n  };\n\n  reset = () => {\n    this.setState({\n      numbers: this.getRandNumArray(),\n      possibleNums: [],\n      stage: 0,\n      instruction: INSTUCTIONS[0],\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className='instruction'>{this.state.instruction}</div>\n        <div className='main'>\n          <Popup\n            number={this.state.possibleNums}\n            isVisible={this.state.stage === 3 ? true : false}\n            restartHandler={this.reset}\n          />\n\n          <FlipMove\n            easing='ease-in-out'\n            duration={500}\n            staggerDelayBy={20}\n            className='grid-container'\n          >\n            {this.renderGrid()}\n          </FlipMove>\n\n          <div className='buttons-container'>\n            <div className='button' onClick={() => this.execute(1)}>\n              Select\n            </div>\n            <div className='button' onClick={() => this.execute(2)}>\n              Select\n            </div>\n            <div className='button' onClick={() => this.execute(3)}>\n              Select\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}